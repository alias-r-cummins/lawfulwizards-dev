function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React from 'react';
import { requireNativeComponent } from 'react-native';
import PropTypes from 'prop-types';
const NATIVE_MODULE_NAME = 'RCTMGLNativeUserLocation';
class NativeUserLocation extends React.Component {
  render() {
    return /*#__PURE__*/React.createElement(RCTMGLNativeUserLocation, this.props);
  }
}
_defineProperty(NativeUserLocation, "propTypes", {
  /**
   * Android render mode.
   *
   *  - normal: just a circle
   *  - compass: triangle with heading
   *  - gps: large arrow
   *
   * @platform android
   */
  androidRenderMode: PropTypes.oneOf(['normal', 'compass', 'gps']),
  /**
   * iOS only. A Boolean value indicating whether the user location annotation may display a permanent heading indicator.
   *
   * @platform ios
   */
  iosShowsUserHeadingIndicator: PropTypes.bool
});
const RCTMGLNativeUserLocation = requireNativeComponent(NATIVE_MODULE_NAME, NativeUserLocation, {
  nativeOnly: {}
});
export default NativeUserLocation;
//# sourceMappingURL=NativeUserLocation.js.map