function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React from 'react';
import PropTypes from 'prop-types';
import { requireNativeComponent } from 'react-native';
import { cloneReactChildrenWithProps, viewPropTypes, isNumber, resolveImagePath } from '../utils';
import AbstractSource from './AbstractSource';
export const NATIVE_MODULE_NAME = 'RCTMGLImageSource';

/**
 * ImageSource is a content source that is used for a georeferenced raster image to be shown on the map.
 * The georeferenced image scales and rotates as the user zooms and rotates the map
 */
class ImageSource extends AbstractSource {
  _getURL() {
    let {
      url
    } = this.props;
    if (isNumber(this.props.url)) {
      url = resolveImagePath(this.props.url);
    }
    return url;
  }
  render() {
    if (!this.props.url || !this.props.coordinates || !this.props.coordinates.length) {
      return null;
    }
    const props = {
      ...this.props,
      url: this._getURL()
    };
    return /*#__PURE__*/React.createElement(RCTMGLImageSource, _extends({
      ref: "nativeSource"
    }, props), cloneReactChildrenWithProps(this.props.children, {
      sourceID: this.props.id
    }));
  }
}
_defineProperty(ImageSource, "propTypes", {
  ...viewPropTypes,
  /**
   * A string that uniquely identifies the source.
   */
  id: PropTypes.string.isRequired,
  /**
   * An HTTP(S) URL, absolute file URL, or local file URL to the source image.
   * Gifs are currently not supported.
   */
  url: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * The top left, top right, bottom right, and bottom left coordinates for the image.
   */
  coordinates: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number).isRequired).isRequired
});
const RCTMGLImageSource = requireNativeComponent(NATIVE_MODULE_NAME, ImageSource);
export default ImageSource;
//# sourceMappingURL=ImageSource.js.map