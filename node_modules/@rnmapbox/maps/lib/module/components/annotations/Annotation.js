function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React from 'react';
import { Easing } from 'react-native';
import PropTypes from 'prop-types';
import { SymbolLayer } from '../SymbolLayer';
import Animated from '../../utils/animated/Animated';
import { AnimatedPoint } from '../../classes';
class Annotation extends React.Component {
  constructor(props) {
    super(props);
    const shape = this._getShapeFromProps(props);
    this.state = {
      shape: props.animated ? new AnimatedPoint(shape) : shape
    };
    this.onPress = this.onPress.bind(this);
  }
  componentDidUpdate(prevProps) {
    if (!Array.isArray(this.props.coordinates)) {
      this.setState({
        shape: null
      });
      return;
    }
    const hasCoordChanged = prevProps.coordinates[0] !== this.props.coordinates[0] || prevProps.coordinates[1] !== this.props.coordinates[1];
    if (!hasCoordChanged) {
      return;
    }
    if (this.props.animated && this.state.shape) {
      // flush current animations
      this.state.shape.stopAnimation();
      this.state.shape.timing({
        coordinates: this.props.coordinates,
        easing: this.props.animationEasingFunction,
        duration: this.props.animationDuration
      }).start();
    } else if (!this.state.shape || !this.props.animated) {
      const shape = this._getShapeFromProps(this.props);
      this.setState({
        shape: this.props.animated ? new AnimatedPoint(shape) : shape
      });
    }
  }
  onPress() {
    if (this.props.onPress) {
      this.props.onPress();
    }
  }
  _getShapeFromProps() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const lng = props.coordinates[0] || 0;
    const lat = props.coordinates[1] || 0;
    return {
      type: 'Point',
      coordinates: [lng, lat]
    };
  }
  get symbolStyle() {
    if (!this.props.icon) {
      return undefined;
    }
    return Object.assign({}, this.props.style, {
      iconImage: this.props.icon
    });
  }
  render() {
    if (!this.props.coordinates) {
      return null;
    }
    return /*#__PURE__*/React.createElement(Animated.ShapeSource, {
      id: this.props.id,
      ref: "source",
      onPress: this.onPress,
      shape: this.state.shape
    }, this.symbolStyle && /*#__PURE__*/React.createElement(SymbolLayer, {
      id: `${this.props.id}-symbol`,
      style: this.symbolStyle
    }), this.props.children);
  }
}
_defineProperty(Annotation, "propTypes", {
  id: PropTypes.string.isRequired,
  animated: PropTypes.bool,
  animationDuration: PropTypes.number,
  animationEasingFunction: PropTypes.func,
  coordinates: PropTypes.arrayOf(PropTypes.number),
  onPress: PropTypes.func,
  children: PropTypes.any,
  style: PropTypes.any,
  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object])
});
_defineProperty(Annotation, "defaultProps", {
  animated: false,
  animationDuration: 1000,
  animationEasingFunction: Easing.linear
});
export default Annotation;
//# sourceMappingURL=Annotation.js.map