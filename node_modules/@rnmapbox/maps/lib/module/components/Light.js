function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React from 'react';
import { requireNativeComponent } from 'react-native';
import { viewPropTypes } from '../utils';
import { LightLayerStyleProp } from '../utils/styleMap';
import AbstractLayer from './AbstractLayer';
export const NATIVE_MODULE_NAME = 'RCTMGLLight';

/**
 * Light represents the light source for extruded geometries
 */
class Light extends AbstractLayer {
  setNativeProps(props) {
    if (this.refs.nativeLight) {
      this.refs.nativeLight.setNativeProps(props);
    }
  }
  render() {
    return /*#__PURE__*/React.createElement(RCTMGLLight, _extends({
      ref: "nativeLight",
      testID: "rctmglLight"
    }, this.props, {
      style: undefined,
      reactStyle: this.getStyle(this.props.style)
    }));
  }
}
_defineProperty(Light, "propTypes", {
  ...viewPropTypes,
  /**
   * Customizable style attributes
   */
  style: LightLayerStyleProp
});
const RCTMGLLight = requireNativeComponent(NATIVE_MODULE_NAME, Light, {
  nativeOnly: {
    reactStyle: true
  }
});
export default Light;
//# sourceMappingURL=Light.js.map