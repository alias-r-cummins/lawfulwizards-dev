"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloneReactChildrenWithProps = cloneReactChildrenWithProps;
exports.existenceChange = existenceChange;
exports.getIOSModuleName = getIOSModuleName;
exports.isAndroid = isAndroid;
exports.isBoolean = isBoolean;
exports.isFunction = isFunction;
exports.isNumber = isNumber;
exports.isPrimitive = isPrimitive;
exports.isString = isString;
exports.isUndefined = isUndefined;
exports.ornamentPositionPropType = void 0;
exports.resolveImagePath = resolveImagePath;
exports.runNativeCommand = runNativeCommand;
exports.toJSONString = toJSONString;
exports.viewPropTypes = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _deprecatedReactNativePropTypes = require("deprecated-react-native-prop-types");
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function getAndroidManagerInstance(module) {
  const haveViewManagerConfig = _reactNative.NativeModules.UIManager && _reactNative.NativeModules.UIManager.getViewManagerConfig;
  return haveViewManagerConfig ? _reactNative.NativeModules.UIManager.getViewManagerConfig(module) : _reactNative.NativeModules.UIManager[module];
}
function getIosManagerInstance(module) {
  return _reactNative.NativeModules[getIOSModuleName(module)];
}
const viewPropTypes = _deprecatedReactNativePropTypes.ViewPropTypes || _reactNative.View.props;
exports.viewPropTypes = viewPropTypes;
const ornamentPositionPropType = _propTypes.default.oneOfType([_propTypes.default.shape({
  top: _propTypes.default.number,
  left: _propTypes.default.number
}), _propTypes.default.shape({
  top: _propTypes.default.number,
  right: _propTypes.default.number
}), _propTypes.default.shape({
  bottom: _propTypes.default.number,
  left: _propTypes.default.number
}), _propTypes.default.shape({
  bottom: _propTypes.default.number,
  right: _propTypes.default.number
})]);
exports.ornamentPositionPropType = ornamentPositionPropType;
function isAndroid() {
  return _reactNative.Platform.OS === 'android';
}
function existenceChange(cur, next) {
  if (!cur && !next) {
    return false;
  }
  return !cur && next || cur && !next;
}
function isFunction(fn) {
  return typeof fn === 'function';
}
function isNumber(num) {
  return typeof num === 'number' && !Number.isNaN(num);
}
function isUndefined(obj) {
  return typeof obj === 'undefined';
}
function isString(str) {
  return typeof str === 'string';
}
function isBoolean(bool) {
  return typeof bool === 'boolean';
}
function isPrimitive(value) {
  return isString(value) || isNumber(value) || isBoolean(value);
}
function runNativeCommand(module, name, nativeRef) {
  let args = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  const handle = (0, _reactNative.findNodeHandle)(nativeRef);
  if (!handle) {
    throw new Error(`Could not find handle for native ref ${module}.${name}`);
  }
  const managerInstance = isAndroid() ? getAndroidManagerInstance(module) : getIosManagerInstance(module);
  if (!managerInstance) {
    throw new Error(`Could not find ${module}`);
  }
  if (isAndroid()) {
    return _reactNative.NativeModules.UIManager.dispatchViewManagerCommand(handle, managerInstance.Commands[name], args);
  }
  if (!managerInstance[name]) {
    throw new Error(`Could not find ${name} for ${module}`);
  }
  return managerInstance[name](handle, ...args);
}
function cloneReactChildrenWithProps(children) {
  let propsToAdd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (!children) {
    return null;
  }
  let foundChildren = null;
  if (!Array.isArray(children)) {
    foundChildren = [children];
  } else {
    foundChildren = children;
  }
  const filteredChildren = foundChildren.filter(child => !!child); // filter out falsy children, since some can be null
  return _react.default.Children.map(filteredChildren, child => /*#__PURE__*/_react.default.cloneElement(child, propsToAdd));
}
function resolveImagePath(imageRef) {
  const res = _reactNative.Image.resolveAssetSource(imageRef);
  return res.uri;
}
function getIOSModuleName(moduleName) {
  if (moduleName.startsWith('RCT')) {
    return moduleName.substring(3);
  }
  return moduleName;
}
function toJSONString() {
  let json = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return JSON.stringify(json);
}
//# sourceMappingURL=index.js.map