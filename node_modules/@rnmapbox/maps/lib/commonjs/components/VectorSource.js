"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NATIVE_MODULE_NAME = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _utils = require("../utils");
var _filterUtils = require("../utils/filterUtils");
var _deprecation = require("../utils/deprecation");
var _AbstractSource = _interopRequireDefault(require("./AbstractSource"));
var _NativeBridgeComponent = _interopRequireDefault(require("./NativeBridgeComponent"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const MapboxGL = _reactNative.NativeModules.MGLModule;
const NATIVE_MODULE_NAME = 'RCTMGLVectorSource';

//interface NativeProps extends Omit<Props, 'children'> {}
exports.NATIVE_MODULE_NAME = NATIVE_MODULE_NAME;
// Omit<Props, 'children'>;
/**
 * VectorSource is a map content source that supplies tiled vector data in Mapbox Vector Tile format to be shown on the map.
 * The location of and metadata about the tiles are defined either by an option dictionary or by an external file that conforms to the TileJSON specification.
 */
class VectorSource extends (0, _NativeBridgeComponent.default)(_AbstractSource.default, NATIVE_MODULE_NAME) {
  static defaultProps = {
    id: MapboxGL.StyleSource.DefaultSourceID
  };
  constructor(props) {
    super(props);
  }
  _setNativeRef(nativeRef) {
    if (nativeRef) {
      this.setNativeRef(nativeRef);
      // this._nativeRef = nativeRef;
      super._runPendingNativeCommands(nativeRef);
    }
  }

  /**
   * Returns all features that match the query parameters regardless of whether or not the feature is
   * currently rendered on the map. The domain of the query includes all currently-loaded vector tiles
   * and GeoJSON source tiles. This function does not check tiles outside of the visible viewport.
   *
   * @example
   * vectorSource.features(['id1', 'id2'])
   *
   * @param  {Array=} layerIDs - A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.
   * @param  {Array=} filter - an optional filter statement to filter the returned Features.
   * @return {FeatureCollection}
   */
  async features() {
    let layerIDs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    const res = await this._runNativeCommand('features', this._nativeRef, [layerIDs, (0, _filterUtils.getFilter)(filter)]);
    if ((0, _utils.isAndroid)()) {
      return JSON.parse(res.data);
    }
    return res.data;
  }
  onPress(event) {
    const {
      nativeEvent: {
        payload: {
          features,
          coordinates,
          point
        }
      }
    } = event;
    let newEvent = {
      features,
      coordinates,
      point
    };
    newEvent = (0, _deprecation.copyPropertiesAsDeprecated)(event, newEvent, key => {
      console.warn(`event.${key} is deprecated on VectorSource#onPress, please use event.features`);
    }, {
      nativeEvent: origNativeEvent => ({
        ...origNativeEvent,
        payload: features[0]
      })
    });
    const {
      onPress
    } = this.props;
    if (onPress) {
      onPress(newEvent);
    }
  }
  render() {
    const props = {
      id: this.props.id,
      existing: this.props.existing,
      url: this.props.url,
      tileUrlTemplates: this.props.tileUrlTemplates,
      minZoomLevel: this.props.minZoomLevel,
      maxZoomLevel: this.props.maxZoomLevel,
      tms: this.props.tms,
      attribution: this.props.attribution,
      hitbox: this.props.hitbox,
      hasPressListener: (0, _utils.isFunction)(this.props.onPress),
      onMapboxVectorSourcePress: this.onPress.bind(this),
      onPress: undefined,
      onAndroidCallback: (0, _utils.isAndroid)() ? this._onAndroidCallback : undefined
    };
    return /*#__PURE__*/_react.default.createElement(RCTMGLVectorSource, _extends({
      ref: r => this._setNativeRef(r)
    }, props), (0, _utils.cloneReactChildrenWithProps)(this.props.children, {
      sourceID: this.props.id
    }));
  }
}
const RCTMGLVectorSource = (0, _reactNative.requireNativeComponent)(NATIVE_MODULE_NAME);
var _default = VectorSource;
exports.default = _default;
//# sourceMappingURL=VectorSource.js.map