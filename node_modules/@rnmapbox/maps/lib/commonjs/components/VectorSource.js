"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NATIVE_MODULE_NAME = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _utils = require("../utils");
var _filterUtils = require("../utils/filterUtils");
var _deprecation = require("../utils/deprecation");
var _AbstractSource = _interopRequireDefault(require("./AbstractSource"));
var _NativeBridgeComponent = _interopRequireDefault(require("./NativeBridgeComponent"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const MapboxGL = _reactNative.NativeModules.MGLModule;
const NATIVE_MODULE_NAME = 'RCTMGLVectorSource';

/**
 * VectorSource is a map content source that supplies tiled vector data in Mapbox Vector Tile format to be shown on the map.
 * The location of and metadata about the tiles are defined either by an option dictionary or by an external file that conforms to the TileJSON specification.
 */
exports.NATIVE_MODULE_NAME = NATIVE_MODULE_NAME;
class VectorSource extends (0, _NativeBridgeComponent.default)(_AbstractSource.default, NATIVE_MODULE_NAME) {
  constructor(props) {
    super(props);
  }
  _setNativeRef(nativeRef) {
    this._nativeRef = nativeRef;
    super._runPendingNativeCommands(nativeRef);
  }

  /**
   * Returns all features that match the query parameters regardless of whether or not the feature is
   * currently rendered on the map. The domain of the query includes all currently-loaded vector tiles
   * and GeoJSON source tiles. This function does not check tiles outside of the visible viewport.
   *
   * @example
   * vectorSource.features(['id1', 'id2'])
   *
   * @param  {Array=} layerIDs - A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.
   * @param  {Array=} filter - an optional filter statement to filter the returned Features.
   * @return {FeatureCollection}
   */
  async features() {
    let layerIDs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    const res = await this._runNativeCommand('features', this._nativeRef, [layerIDs, (0, _filterUtils.getFilter)(filter)]);
    if ((0, _utils.isAndroid)()) {
      return JSON.parse(res.data);
    }
    return res.data;
  }
  onPress(event) {
    const {
      nativeEvent: {
        payload: {
          features,
          coordinates,
          point
        }
      }
    } = event;
    let newEvent = {
      features,
      coordinates,
      point
    };
    newEvent = (0, _deprecation.copyPropertiesAsDeprecated)(event, newEvent, key => {
      console.warn(`event.${key} is deprecated on VectorSource#onPress, please use event.features`);
    }, {
      nativeEvent: origNativeEvent => ({
        ...origNativeEvent,
        payload: features[0]
      })
    });
    this.props.onPress(newEvent);
  }
  render() {
    const props = {
      id: this.props.id,
      url: this.props.url,
      tileUrlTemplates: this.props.tileUrlTemplates,
      minZoomLevel: this.props.minZoomLevel,
      maxZoomLevel: this.props.maxZoomLevel,
      tms: this.props.tms,
      attribution: this.props.attribution,
      hitbox: this.props.hitbox,
      hasPressListener: (0, _utils.isFunction)(this.props.onPress),
      onMapboxVectorSourcePress: this.onPress.bind(this),
      onPress: undefined,
      ref: nativeRef => this._setNativeRef(nativeRef),
      onAndroidCallback: (0, _utils.isAndroid)() ? this._onAndroidCallback : undefined
    };
    return /*#__PURE__*/_react.default.createElement(RCTMGLVectorSource, _extends({
      ref: this.setNativeRef
    }, props), (0, _utils.cloneReactChildrenWithProps)(this.props.children, {
      sourceID: this.props.id
    }));
  }
}
_defineProperty(VectorSource, "propTypes", {
  ..._utils.viewPropTypes,
  /**
   * A string that uniquely identifies the source.
   */
  id: _propTypes.default.string.isRequired,
  /**
   * A URL to a TileJSON configuration file describing the source’s contents and other metadata.
   */
  url: _propTypes.default.string,
  /**
   * An array of tile URL templates. If multiple endpoints are specified, clients may use any combination of endpoints.
   * Example: https://example.com/vector-tiles/{z}/{x}/{y}.pbf
   */
  tileUrlTemplates: _propTypes.default.arrayOf(_propTypes.default.string),
  /**
   * An unsigned integer that specifies the minimum zoom level at which to display tiles from the source.
   * The value should be between 0 and 22, inclusive, and less than
   * maxZoomLevel, if specified. The default value for this option is 0.
   */
  minZoomLevel: _propTypes.default.number,
  /**
   * An unsigned integer that specifies the maximum zoom level at which to display tiles from the source.
   * The value should be between 0 and 22, inclusive, and less than
   * minZoomLevel, if specified. The default value for this option is 22.
   */
  maxZoomLevel: _propTypes.default.number,
  /**
   * Influences the y direction of the tile coordinates. (tms inverts y axis)
   */
  tms: _propTypes.default.bool,
  /**
   * An HTML or literal text string defining the buttons to be displayed in an action sheet when the
   * source is part of a map view’s style and the map view’s attribution button is pressed.
   */
  attribution: _propTypes.default.string,
  /**
   * Source press listener, gets called when a user presses one of the children layers only
   * if that layer has a higher z-index than another source layers
   *
   * @param {Object} event
   * @param {Object[]} event.features - the geojson features that have hit by the press (might be multiple)
   * @param {Object} event.coordinates - the coordinates of the click
   * @param {Object} event.point - the point of the click
   */
  onPress: _propTypes.default.func,
  /**
   * Overrides the default touch hitbox(44x44 pixels) for the source layers
   */
  hitbox: _propTypes.default.shape({
    /**
     * `width` of hitbox
     */
    width: _propTypes.default.number.isRequired,
    /**
     * `height` of hitbox
     */
    height: _propTypes.default.number.isRequired
  })
});
_defineProperty(VectorSource, "defaultProps", {
  id: MapboxGL.StyleSource.DefaultSourceID
});
const RCTMGLVectorSource = (0, _reactNative.requireNativeComponent)(NATIVE_MODULE_NAME, VectorSource, {
  nativeOnly: {
    hasPressListener: true,
    onMapboxVectorSourcePress: true
  }
});
var _default = VectorSource;
exports.default = _default;
//# sourceMappingURL=VectorSource.js.map