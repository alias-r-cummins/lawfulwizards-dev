"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NATIVE_MODULE_NAME = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _utils = require("../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const NATIVE_MODULE_NAME = 'RCTMGLCallout';
exports.NATIVE_MODULE_NAME = NATIVE_MODULE_NAME;
const styles = _reactNative.StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center',
    width: 180,
    zIndex: 9999999
  },
  tip: {
    zIndex: 1000,
    marginTop: -2,
    elevation: 0,
    backgroundColor: 'transparent',
    borderTopWidth: 16,
    borderRightWidth: 8,
    borderBottomWidth: 0,
    borderLeftWidth: 8,
    borderTopColor: 'white',
    borderRightColor: 'transparent',
    borderBottomColor: 'transparent',
    borderLeftColor: 'transparent'
  },
  content: {
    position: 'relative',
    padding: 8,
    flex: 1,
    borderRadius: 3,
    borderWidth: 1,
    borderColor: 'rgba(0, 0, 0, 0.2)',
    backgroundColor: 'white'
  },
  title: {
    color: 'black',
    textAlign: 'center'
  }
});

/**
 *  Callout that displays information about a selected annotation near the annotation.
 */
class Callout extends _react.default.PureComponent {
  get _containerStyle() {
    return [{
      position: 'absolute',
      zIndex: 999,
      backgroundColor: 'transparent'
    }, this.props.containerStyle];
  }
  get _hasChildren() {
    return _react.default.Children.count(this.props.children) > 0;
  }
  _renderDefaultCallout() {
    return /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
      style: [styles.container, this.props.style]
    }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [styles.content, this.props.contentStyle]
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      style: [styles.title, this.props.textStyle]
    }, this.props.title)), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [styles.tip, this.props.tipStyle]
    }));
  }
  _renderCustomCallout() {
    return /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, _extends({}, this.props, {
      style: this.props.style
    }), this.props.children);
  }
  render() {
    const calloutContent = this._hasChildren ? this._renderCustomCallout() : this._renderDefaultCallout();
    return /*#__PURE__*/_react.default.createElement(RCTMGLCallout, {
      style: this._containerStyle
    }, calloutContent);
  }
}
_defineProperty(Callout, "propTypes", {
  ..._utils.viewPropTypes,
  /**
   * String that gets displayed in the default callout.
   */
  title: _propTypes.default.string,
  /**
   * Style property for the Animated.View wrapper, apply animations to this
   */
  style: _propTypes.default.any,
  /**
   * Style property for the native RCTMGLCallout container, set at your own risk.
   */
  containerStyle: _propTypes.default.any,
  /**
   * Style property for the content bubble.
   */
  contentStyle: _propTypes.default.any,
  /**
   * Style property for the triangle tip under the content.
   */
  tipStyle: _propTypes.default.any,
  /**
   * Style property for the title in the content bubble.
   */
  textStyle: _propTypes.default.any
});
const RCTMGLCallout = (0, _reactNative.requireNativeComponent)(NATIVE_MODULE_NAME, Callout);
var _default = Callout;
exports.default = _default;
//# sourceMappingURL=Callout.js.map