"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NATIVE_MODULE_NAME = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _utils = require("../utils");
var _ShapeSource = require("./ShapeSource");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const NATIVE_MODULE_NAME = 'RCTMGLImages';
exports.NATIVE_MODULE_NAME = NATIVE_MODULE_NAME;
function _isUrlOrPath(value) {
  return (typeof value === 'string' || value instanceof String) && (value.startsWith('file://') || value.startsWith('http://') || value.startsWith('https://') || value.startsWith('data:') || value.startsWith('asset://') || value.startsWith('/'));
}

/**
 * Images defines the images used in Symbol etc. layers.
 */
class Images extends _react.default.Component {
  _getImages() {
    if (!this.props.images && !this.props.nativeAssetImages) {
      return {};
    }
    const images = {};
    let nativeImages = [];
    if (this.props.images) {
      const imageNames = Object.keys(this.props.images);
      for (const imageName of imageNames) {
        const value = this.props.images[imageName];
        if (imageName === _ShapeSource.ShapeSource.NATIVE_ASSETS_KEY && Array.isArray(value)) {
          console.warn(`Use of ${_ShapeSource.ShapeSource.NATIVE_ASSETS_KEY} in Images#images is deprecated please use Images#nativeAssetImages`);
          nativeImages = value;
        } else if (_isUrlOrPath(value)) {
          images[imageName] = value;
        } else {
          const res = _reactNative.Image.resolveAssetSource(value);
          if (res && res.uri) {
            images[imageName] = res;
          }
        }
      }
    }
    if (this.props.nativeAssetImages) {
      nativeImages = this.props.nativeAssetImages;
    }
    return {
      images,
      nativeImages
    };
  }
  _onImageMissing(event) {
    if (this.props.onImageMissing) {
      this.props.onImageMissing(event.nativeEvent.payload.imageKey);
    }
  }
  render() {
    const props = {
      id: this.props.id,
      hasOnImageMissing: !!this.props.onImageMissing,
      onImageMissing: this._onImageMissing.bind(this),
      ...this._getImages()
    };
    return /*#__PURE__*/_react.default.createElement(RCTMGLImages, props, this.props.children);
  }
}
_defineProperty(Images, "NATIVE_ASSETS_KEY", 'assets');
_defineProperty(Images, "propTypes", {
  ..._utils.viewPropTypes,
  /**
   * Specifies the external images in key-value pairs required for the shape source.
   * Keys are names - see iconImage expressions, values can be either urls-s objects
   * with format {uri: 'http://...'}` or `require('image.png')` or `import 'image.png'`
   */
  images: _propTypes.default.object,
  /**
   * If you have an asset under Image.xcassets on iOS and the drawables directory on android
   * you can specify an array of string names with assets as the key `['pin']`.
   */
  nativeAssetImages: _propTypes.default.arrayOf(_propTypes.default.string),
  /**
   * Gets called when a Layer is trying to render an image whose key is not present in
   * any of the `Images` component of the Map.
   */
  onImageMissing: _propTypes.default.func
});
const RCTMGLImages = (0, _reactNative.requireNativeComponent)(NATIVE_MODULE_NAME, Images, {
  nativeOnly: {
    nativeImages: true,
    onImageMissing: true
  }
});
var _default = Images;
exports.default = _default;
//# sourceMappingURL=Images.js.map