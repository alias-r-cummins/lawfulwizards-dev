"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NATIVE_MODULE_NAME = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _utils = require("../utils");
var _AbstractSource = _interopRequireDefault(require("./AbstractSource"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const NATIVE_MODULE_NAME = 'RCTMGLImageSource';

/**
 * ImageSource is a content source that is used for a georeferenced raster image to be shown on the map.
 * The georeferenced image scales and rotates as the user zooms and rotates the map
 */
exports.NATIVE_MODULE_NAME = NATIVE_MODULE_NAME;
class ImageSource extends _AbstractSource.default {
  _getURL() {
    let {
      url
    } = this.props;
    if ((0, _utils.isNumber)(this.props.url)) {
      url = (0, _utils.resolveImagePath)(this.props.url);
    }
    return url;
  }
  render() {
    if (!this.props.url || !this.props.coordinates || !this.props.coordinates.length) {
      return null;
    }
    const props = {
      ...this.props,
      url: this._getURL()
    };
    return /*#__PURE__*/_react.default.createElement(RCTMGLImageSource, _extends({
      ref: "nativeSource"
    }, props), (0, _utils.cloneReactChildrenWithProps)(this.props.children, {
      sourceID: this.props.id
    }));
  }
}
_defineProperty(ImageSource, "propTypes", {
  ..._utils.viewPropTypes,
  /**
   * A string that uniquely identifies the source.
   */
  id: _propTypes.default.string.isRequired,
  /**
   * An HTTP(S) URL, absolute file URL, or local file URL to the source image.
   * Gifs are currently not supported.
   */
  url: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  /**
   * The top left, top right, bottom right, and bottom left coordinates for the image.
   */
  coordinates: _propTypes.default.arrayOf(_propTypes.default.arrayOf(_propTypes.default.number).isRequired).isRequired
});
const RCTMGLImageSource = (0, _reactNative.requireNativeComponent)(NATIVE_MODULE_NAME, ImageSource);
var _default = ImageSource;
exports.default = _default;
//# sourceMappingURL=ImageSource.js.map